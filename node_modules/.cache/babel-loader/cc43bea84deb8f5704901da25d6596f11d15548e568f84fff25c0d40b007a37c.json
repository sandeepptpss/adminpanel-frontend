{"ast":null,"code":"/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  return diffs;\n}\n;\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n  return diff_bisect_(text1, text2);\n}\n;\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = delta % 2 != 0;\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\n;\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n  return diffs.concat(diffsb);\n}\n;\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n}\n;\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n}\n;\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n}\n;\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n}\n;\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\nmodule.exports = diff;","map":{"version":3,"names":["DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","diff_main","text1","text2","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_bisect_","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_halfMatchI_","seed","j","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","pointer","count_delete","count_insert","text_delete","text_insert","splice","pop","changes","diff","INSERT","DELETE","EQUAL","module","exports"],"sources":["/home/tpss/public_html/Mernstack/authtask/frontend/node_modules/fast-diff/diff.js"],"sourcesContent":["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i),\n                                           shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n                                           shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n\n\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\n\nmodule.exports = diff;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAG,CAAC,CAAC;AACpB,IAAIC,WAAW,GAAG,CAAC;AACnB,IAAIC,UAAU,GAAG,CAAC;;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAC/B;EACA,IAAID,KAAK,IAAIC,KAAK,EAAE;IAClB,IAAID,KAAK,EAAE;MACT,OAAO,CAAC,CAACF,UAAU,EAAEE,KAAK,CAAC,CAAC;IAC9B;IACA,OAAO,EAAE;EACX;;EAEA;EACA,IAAIE,YAAY,GAAGC,iBAAiB,CAACH,KAAK,EAAEC,KAAK,CAAC;EAClD,IAAIG,YAAY,GAAGJ,KAAK,CAACK,SAAS,CAAC,CAAC,EAAEH,YAAY,CAAC;EACnDF,KAAK,GAAGA,KAAK,CAACK,SAAS,CAACH,YAAY,CAAC;EACrCD,KAAK,GAAGA,KAAK,CAACI,SAAS,CAACH,YAAY,CAAC;;EAErC;EACAA,YAAY,GAAGI,iBAAiB,CAACN,KAAK,EAAEC,KAAK,CAAC;EAC9C,IAAIM,YAAY,GAAGP,KAAK,CAACK,SAAS,CAACL,KAAK,CAACQ,MAAM,GAAGN,YAAY,CAAC;EAC/DF,KAAK,GAAGA,KAAK,CAACK,SAAS,CAAC,CAAC,EAAEL,KAAK,CAACQ,MAAM,GAAGN,YAAY,CAAC;EACvDD,KAAK,GAAGA,KAAK,CAACI,SAAS,CAAC,CAAC,EAAEJ,KAAK,CAACO,MAAM,GAAGN,YAAY,CAAC;;EAEvD;EACA,IAAIO,KAAK,GAAGC,aAAa,CAACV,KAAK,EAAEC,KAAK,CAAC;;EAEvC;EACA,IAAIG,YAAY,EAAE;IAChBK,KAAK,CAACE,OAAO,CAAC,CAACb,UAAU,EAAEM,YAAY,CAAC,CAAC;EAC3C;EACA,IAAIG,YAAY,EAAE;IAChBE,KAAK,CAACG,IAAI,CAAC,CAACd,UAAU,EAAES,YAAY,CAAC,CAAC;EACxC;EACAM,iBAAiB,CAACJ,KAAK,CAAC;EACxB,OAAOA,KAAK;AACd;AAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACV,KAAK,EAAEC,KAAK,EAAE;EACnC,IAAIQ,KAAK;EAET,IAAI,CAACT,KAAK,EAAE;IACV;IACA,OAAO,CAAC,CAACH,WAAW,EAAEI,KAAK,CAAC,CAAC;EAC/B;EAEA,IAAI,CAACA,KAAK,EAAE;IACV;IACA,OAAO,CAAC,CAACL,WAAW,EAAEI,KAAK,CAAC,CAAC;EAC/B;EAEA,IAAIc,QAAQ,GAAGd,KAAK,CAACQ,MAAM,GAAGP,KAAK,CAACO,MAAM,GAAGR,KAAK,GAAGC,KAAK;EAC1D,IAAIc,SAAS,GAAGf,KAAK,CAACQ,MAAM,GAAGP,KAAK,CAACO,MAAM,GAAGP,KAAK,GAAGD,KAAK;EAC3D,IAAIgB,CAAC,GAAGF,QAAQ,CAACG,OAAO,CAACF,SAAS,CAAC;EACnC,IAAIC,CAAC,IAAI,CAAC,CAAC,EAAE;IACX;IACAP,KAAK,GAAG,CAAC,CAACZ,WAAW,EAAEiB,QAAQ,CAACT,SAAS,CAAC,CAAC,EAAEW,CAAC,CAAC,CAAC,EACvC,CAAClB,UAAU,EAAEiB,SAAS,CAAC,EACvB,CAAClB,WAAW,EAAEiB,QAAQ,CAACT,SAAS,CAACW,CAAC,GAAGD,SAAS,CAACP,MAAM,CAAC,CAAC,CAAC;IACjE;IACA,IAAIR,KAAK,CAACQ,MAAM,GAAGP,KAAK,CAACO,MAAM,EAAE;MAC/BC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGb,WAAW;IACzC;IACA,OAAOa,KAAK;EACd;EAEA,IAAIM,SAAS,CAACP,MAAM,IAAI,CAAC,EAAE;IACzB;IACA;IACA,OAAO,CAAC,CAACZ,WAAW,EAAEI,KAAK,CAAC,EAAE,CAACH,WAAW,EAAEI,KAAK,CAAC,CAAC;EACrD;;EAEA;EACA,IAAIiB,EAAE,GAAGC,eAAe,CAACnB,KAAK,EAAEC,KAAK,CAAC;EACtC,IAAIiB,EAAE,EAAE;IACN;IACA,IAAIE,OAAO,GAAGF,EAAE,CAAC,CAAC,CAAC;IACnB,IAAIG,OAAO,GAAGH,EAAE,CAAC,CAAC,CAAC;IACnB,IAAII,OAAO,GAAGJ,EAAE,CAAC,CAAC,CAAC;IACnB,IAAIK,OAAO,GAAGL,EAAE,CAAC,CAAC,CAAC;IACnB,IAAIM,UAAU,GAAGN,EAAE,CAAC,CAAC,CAAC;IACtB;IACA,IAAIO,OAAO,GAAG1B,SAAS,CAACqB,OAAO,EAAEE,OAAO,CAAC;IACzC,IAAII,OAAO,GAAG3B,SAAS,CAACsB,OAAO,EAAEE,OAAO,CAAC;IACzC;IACA,OAAOE,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC7B,UAAU,EAAE0B,UAAU,CAAC,CAAC,EAAEE,OAAO,CAAC;EAC5D;EAEA,OAAOE,YAAY,CAAC5B,KAAK,EAAEC,KAAK,CAAC;AACnC;AAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2B,YAAYA,CAAC5B,KAAK,EAAEC,KAAK,EAAE;EAClC;EACA,IAAI4B,YAAY,GAAG7B,KAAK,CAACQ,MAAM;EAC/B,IAAIsB,YAAY,GAAG7B,KAAK,CAACO,MAAM;EAC/B,IAAIuB,KAAK,GAAGC,IAAI,CAACC,IAAI,CAAC,CAACJ,YAAY,GAAGC,YAAY,IAAI,CAAC,CAAC;EACxD,IAAII,QAAQ,GAAGH,KAAK;EACpB,IAAII,QAAQ,GAAG,CAAC,GAAGJ,KAAK;EACxB,IAAIK,EAAE,GAAG,IAAIC,KAAK,CAACF,QAAQ,CAAC;EAC5B,IAAIG,EAAE,GAAG,IAAID,KAAK,CAACF,QAAQ,CAAC;EAC5B;EACA;EACA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;IACjCH,EAAE,CAACG,CAAC,CAAC,GAAG,CAAC,CAAC;IACVD,EAAE,CAACC,CAAC,CAAC,GAAG,CAAC,CAAC;EACZ;EACAH,EAAE,CAACF,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;EACpBI,EAAE,CAACJ,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;EACpB,IAAIM,KAAK,GAAGX,YAAY,GAAGC,YAAY;EACvC;EACA;EACA,IAAIW,KAAK,GAAID,KAAK,GAAG,CAAC,IAAI,CAAE;EAC5B;EACA;EACA,IAAIE,OAAO,GAAG,CAAC;EACf,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,KAAK,GAAG,CAAC;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,KAAK,EAAEe,CAAC,EAAE,EAAE;IAC9B;IACA,KAAK,IAAIC,EAAE,GAAG,CAACD,CAAC,GAAGJ,OAAO,EAAEK,EAAE,IAAID,CAAC,GAAGH,KAAK,EAAEI,EAAE,IAAI,CAAC,EAAE;MACpD,IAAIC,SAAS,GAAGd,QAAQ,GAAGa,EAAE;MAC7B,IAAIE,EAAE;MACN,IAAIF,EAAE,IAAI,CAACD,CAAC,IAAKC,EAAE,IAAID,CAAC,IAAIV,EAAE,CAACY,SAAS,GAAG,CAAC,CAAC,GAAGZ,EAAE,CAACY,SAAS,GAAG,CAAC,CAAE,EAAE;QAClEC,EAAE,GAAGb,EAAE,CAACY,SAAS,GAAG,CAAC,CAAC;MACxB,CAAC,MAAM;QACLC,EAAE,GAAGb,EAAE,CAACY,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5B;MACA,IAAIE,EAAE,GAAGD,EAAE,GAAGF,EAAE;MAChB,OAAOE,EAAE,GAAGpB,YAAY,IAAIqB,EAAE,GAAGpB,YAAY,IACtC9B,KAAK,CAACmD,MAAM,CAACF,EAAE,CAAC,IAAIhD,KAAK,CAACkD,MAAM,CAACD,EAAE,CAAC,EAAE;QAC3CD,EAAE,EAAE;QACJC,EAAE,EAAE;MACN;MACAd,EAAE,CAACY,SAAS,CAAC,GAAGC,EAAE;MAClB,IAAIA,EAAE,GAAGpB,YAAY,EAAE;QACrB;QACAc,KAAK,IAAI,CAAC;MACZ,CAAC,MAAM,IAAIO,EAAE,GAAGpB,YAAY,EAAE;QAC5B;QACAY,OAAO,IAAI,CAAC;MACd,CAAC,MAAM,IAAID,KAAK,EAAE;QAChB,IAAIW,SAAS,GAAGlB,QAAQ,GAAGM,KAAK,GAAGO,EAAE;QACrC,IAAIK,SAAS,IAAI,CAAC,IAAIA,SAAS,GAAGjB,QAAQ,IAAIG,EAAE,CAACc,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE;UACjE;UACA,IAAIC,EAAE,GAAGxB,YAAY,GAAGS,EAAE,CAACc,SAAS,CAAC;UACrC,IAAIH,EAAE,IAAII,EAAE,EAAE;YACZ;YACA,OAAOC,iBAAiB,CAACtD,KAAK,EAAEC,KAAK,EAAEgD,EAAE,EAAEC,EAAE,CAAC;UAChD;QACF;MACF;IACF;;IAEA;IACA,KAAK,IAAIK,EAAE,GAAG,CAACT,CAAC,GAAGF,OAAO,EAAEW,EAAE,IAAIT,CAAC,GAAGD,KAAK,EAAEU,EAAE,IAAI,CAAC,EAAE;MACpD,IAAIH,SAAS,GAAGlB,QAAQ,GAAGqB,EAAE;MAC7B,IAAIF,EAAE;MACN,IAAIE,EAAE,IAAI,CAACT,CAAC,IAAKS,EAAE,IAAIT,CAAC,IAAIR,EAAE,CAACc,SAAS,GAAG,CAAC,CAAC,GAAGd,EAAE,CAACc,SAAS,GAAG,CAAC,CAAE,EAAE;QAClEC,EAAE,GAAGf,EAAE,CAACc,SAAS,GAAG,CAAC,CAAC;MACxB,CAAC,MAAM;QACLC,EAAE,GAAGf,EAAE,CAACc,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5B;MACA,IAAII,EAAE,GAAGH,EAAE,GAAGE,EAAE;MAChB,OAAOF,EAAE,GAAGxB,YAAY,IAAI2B,EAAE,GAAG1B,YAAY,IACtC9B,KAAK,CAACmD,MAAM,CAACtB,YAAY,GAAGwB,EAAE,GAAG,CAAC,CAAC,IACnCpD,KAAK,CAACkD,MAAM,CAACrB,YAAY,GAAG0B,EAAE,GAAG,CAAC,CAAC,EAAE;QAC1CH,EAAE,EAAE;QACJG,EAAE,EAAE;MACN;MACAlB,EAAE,CAACc,SAAS,CAAC,GAAGC,EAAE;MAClB,IAAIA,EAAE,GAAGxB,YAAY,EAAE;QACrB;QACAgB,KAAK,IAAI,CAAC;MACZ,CAAC,MAAM,IAAIW,EAAE,GAAG1B,YAAY,EAAE;QAC5B;QACAc,OAAO,IAAI,CAAC;MACd,CAAC,MAAM,IAAI,CAACH,KAAK,EAAE;QACjB,IAAIO,SAAS,GAAGd,QAAQ,GAAGM,KAAK,GAAGe,EAAE;QACrC,IAAIP,SAAS,IAAI,CAAC,IAAIA,SAAS,GAAGb,QAAQ,IAAIC,EAAE,CAACY,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE;UACjE,IAAIC,EAAE,GAAGb,EAAE,CAACY,SAAS,CAAC;UACtB,IAAIE,EAAE,GAAGhB,QAAQ,GAAGe,EAAE,GAAGD,SAAS;UAClC;UACAK,EAAE,GAAGxB,YAAY,GAAGwB,EAAE;UACtB,IAAIJ,EAAE,IAAII,EAAE,EAAE;YACZ;YACA,OAAOC,iBAAiB,CAACtD,KAAK,EAAEC,KAAK,EAAEgD,EAAE,EAAEC,EAAE,CAAC;UAChD;QACF;MACF;IACF;EACF;EACA;EACA;EACA,OAAO,CAAC,CAACtD,WAAW,EAAEI,KAAK,CAAC,EAAE,CAACH,WAAW,EAAEI,KAAK,CAAC,CAAC;AACrD;AAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqD,iBAAiBA,CAACtD,KAAK,EAAEC,KAAK,EAAEsC,CAAC,EAAEkB,CAAC,EAAE;EAC7C,IAAIC,MAAM,GAAG1D,KAAK,CAACK,SAAS,CAAC,CAAC,EAAEkC,CAAC,CAAC;EAClC,IAAIoB,MAAM,GAAG1D,KAAK,CAACI,SAAS,CAAC,CAAC,EAAEoD,CAAC,CAAC;EAClC,IAAIG,MAAM,GAAG5D,KAAK,CAACK,SAAS,CAACkC,CAAC,CAAC;EAC/B,IAAIsB,MAAM,GAAG5D,KAAK,CAACI,SAAS,CAACoD,CAAC,CAAC;;EAE/B;EACA,IAAIhD,KAAK,GAAGV,SAAS,CAAC2D,MAAM,EAAEC,MAAM,CAAC;EACrC,IAAIG,MAAM,GAAG/D,SAAS,CAAC6D,MAAM,EAAEC,MAAM,CAAC;EAEtC,OAAOpD,KAAK,CAACkB,MAAM,CAACmC,MAAM,CAAC;AAC7B;AAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS3D,iBAAiBA,CAACH,KAAK,EAAEC,KAAK,EAAE;EACvC;EACA,IAAI,CAACD,KAAK,IAAI,CAACC,KAAK,IAAID,KAAK,CAACmD,MAAM,CAAC,CAAC,CAAC,IAAIlD,KAAK,CAACkD,MAAM,CAAC,CAAC,CAAC,EAAE;IAC1D,OAAO,CAAC;EACV;EACA;EACA;EACA,IAAIY,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAGhC,IAAI,CAACiC,GAAG,CAACjE,KAAK,CAACQ,MAAM,EAAEP,KAAK,CAACO,MAAM,CAAC;EACrD,IAAI0D,UAAU,GAAGF,UAAU;EAC3B,IAAIG,YAAY,GAAG,CAAC;EACpB,OAAOJ,UAAU,GAAGG,UAAU,EAAE;IAC9B,IAAIlE,KAAK,CAACK,SAAS,CAAC8D,YAAY,EAAED,UAAU,CAAC,IACzCjE,KAAK,CAACI,SAAS,CAAC8D,YAAY,EAAED,UAAU,CAAC,EAAE;MAC7CH,UAAU,GAAGG,UAAU;MACvBC,YAAY,GAAGJ,UAAU;IAC3B,CAAC,MAAM;MACLC,UAAU,GAAGE,UAAU;IACzB;IACAA,UAAU,GAAGlC,IAAI,CAACoC,KAAK,CAAC,CAACJ,UAAU,GAAGD,UAAU,IAAI,CAAC,GAAGA,UAAU,CAAC;EACrE;EACA,OAAOG,UAAU;AACnB;AAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS5D,iBAAiBA,CAACN,KAAK,EAAEC,KAAK,EAAE;EACvC;EACA,IAAI,CAACD,KAAK,IAAI,CAACC,KAAK,IAChBD,KAAK,CAACmD,MAAM,CAACnD,KAAK,CAACQ,MAAM,GAAG,CAAC,CAAC,IAAIP,KAAK,CAACkD,MAAM,CAAClD,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC,EAAE;IACpE,OAAO,CAAC;EACV;EACA;EACA;EACA,IAAIuD,UAAU,GAAG,CAAC;EAClB,IAAIC,UAAU,GAAGhC,IAAI,CAACiC,GAAG,CAACjE,KAAK,CAACQ,MAAM,EAAEP,KAAK,CAACO,MAAM,CAAC;EACrD,IAAI0D,UAAU,GAAGF,UAAU;EAC3B,IAAIK,UAAU,GAAG,CAAC;EAClB,OAAON,UAAU,GAAGG,UAAU,EAAE;IAC9B,IAAIlE,KAAK,CAACK,SAAS,CAACL,KAAK,CAACQ,MAAM,GAAG0D,UAAU,EAAElE,KAAK,CAACQ,MAAM,GAAG6D,UAAU,CAAC,IACrEpE,KAAK,CAACI,SAAS,CAACJ,KAAK,CAACO,MAAM,GAAG0D,UAAU,EAAEjE,KAAK,CAACO,MAAM,GAAG6D,UAAU,CAAC,EAAE;MACzEN,UAAU,GAAGG,UAAU;MACvBG,UAAU,GAAGN,UAAU;IACzB,CAAC,MAAM;MACLC,UAAU,GAAGE,UAAU;IACzB;IACAA,UAAU,GAAGlC,IAAI,CAACoC,KAAK,CAAC,CAACJ,UAAU,GAAGD,UAAU,IAAI,CAAC,GAAGA,UAAU,CAAC;EACrE;EACA,OAAOG,UAAU;AACnB;AAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS/C,eAAeA,CAACnB,KAAK,EAAEC,KAAK,EAAE;EACrC,IAAIa,QAAQ,GAAGd,KAAK,CAACQ,MAAM,GAAGP,KAAK,CAACO,MAAM,GAAGR,KAAK,GAAGC,KAAK;EAC1D,IAAIc,SAAS,GAAGf,KAAK,CAACQ,MAAM,GAAGP,KAAK,CAACO,MAAM,GAAGP,KAAK,GAAGD,KAAK;EAC3D,IAAIc,QAAQ,CAACN,MAAM,GAAG,CAAC,IAAIO,SAAS,CAACP,MAAM,GAAG,CAAC,GAAGM,QAAQ,CAACN,MAAM,EAAE;IACjE,OAAO,IAAI,CAAC,CAAE;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAAS8D,gBAAgBA,CAACxD,QAAQ,EAAEC,SAAS,EAAEC,CAAC,EAAE;IAChD;IACA,IAAIuD,IAAI,GAAGzD,QAAQ,CAACT,SAAS,CAACW,CAAC,EAAEA,CAAC,GAAGgB,IAAI,CAACoC,KAAK,CAACtD,QAAQ,CAACN,MAAM,GAAG,CAAC,CAAC,CAAC;IACrE,IAAIgE,CAAC,GAAG,CAAC,CAAC;IACV,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIC,eAAe,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,gBAAgB;IACxE,OAAO,CAACL,CAAC,GAAGzD,SAAS,CAACE,OAAO,CAACsD,IAAI,EAAEC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;MACjD,IAAIM,YAAY,GAAG3E,iBAAiB,CAACW,QAAQ,CAACT,SAAS,CAACW,CAAC,CAAC,EACrBD,SAAS,CAACV,SAAS,CAACmE,CAAC,CAAC,CAAC;MAC5D,IAAIO,YAAY,GAAGzE,iBAAiB,CAACQ,QAAQ,CAACT,SAAS,CAAC,CAAC,EAAEW,CAAC,CAAC,EACxBD,SAAS,CAACV,SAAS,CAAC,CAAC,EAAEmE,CAAC,CAAC,CAAC;MAC/D,IAAIC,WAAW,CAACjE,MAAM,GAAGuE,YAAY,GAAGD,YAAY,EAAE;QACpDL,WAAW,GAAG1D,SAAS,CAACV,SAAS,CAACmE,CAAC,GAAGO,YAAY,EAAEP,CAAC,CAAC,GAClDzD,SAAS,CAACV,SAAS,CAACmE,CAAC,EAAEA,CAAC,GAAGM,YAAY,CAAC;QAC5CJ,eAAe,GAAG5D,QAAQ,CAACT,SAAS,CAAC,CAAC,EAAEW,CAAC,GAAG+D,YAAY,CAAC;QACzDJ,eAAe,GAAG7D,QAAQ,CAACT,SAAS,CAACW,CAAC,GAAG8D,YAAY,CAAC;QACtDF,gBAAgB,GAAG7D,SAAS,CAACV,SAAS,CAAC,CAAC,EAAEmE,CAAC,GAAGO,YAAY,CAAC;QAC3DF,gBAAgB,GAAG9D,SAAS,CAACV,SAAS,CAACmE,CAAC,GAAGM,YAAY,CAAC;MAC1D;IACF;IACA,IAAIL,WAAW,CAACjE,MAAM,GAAG,CAAC,IAAIM,QAAQ,CAACN,MAAM,EAAE;MAC7C,OAAO,CAACkE,eAAe,EAAEC,eAAe,EAChCC,gBAAgB,EAAEC,gBAAgB,EAAEJ,WAAW,CAAC;IAC1D,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;;EAEA;EACA,IAAIO,GAAG,GAAGV,gBAAgB,CAACxD,QAAQ,EAAEC,SAAS,EACnBiB,IAAI,CAACC,IAAI,CAACnB,QAAQ,CAACN,MAAM,GAAG,CAAC,CAAC,CAAC;EAC1D;EACA,IAAIyE,GAAG,GAAGX,gBAAgB,CAACxD,QAAQ,EAAEC,SAAS,EACnBiB,IAAI,CAACC,IAAI,CAACnB,QAAQ,CAACN,MAAM,GAAG,CAAC,CAAC,CAAC;EAC1D,IAAIU,EAAE;EACN,IAAI,CAAC8D,GAAG,IAAI,CAACC,GAAG,EAAE;IAChB,OAAO,IAAI;EACb,CAAC,MAAM,IAAI,CAACA,GAAG,EAAE;IACf/D,EAAE,GAAG8D,GAAG;EACV,CAAC,MAAM,IAAI,CAACA,GAAG,EAAE;IACf9D,EAAE,GAAG+D,GAAG;EACV,CAAC,MAAM;IACL;IACA/D,EAAE,GAAG8D,GAAG,CAAC,CAAC,CAAC,CAACxE,MAAM,GAAGyE,GAAG,CAAC,CAAC,CAAC,CAACzE,MAAM,GAAGwE,GAAG,GAAGC,GAAG;EAChD;;EAEA;EACA,IAAI7D,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO;EACtC,IAAIvB,KAAK,CAACQ,MAAM,GAAGP,KAAK,CAACO,MAAM,EAAE;IAC/BY,OAAO,GAAGF,EAAE,CAAC,CAAC,CAAC;IACfG,OAAO,GAAGH,EAAE,CAAC,CAAC,CAAC;IACfI,OAAO,GAAGJ,EAAE,CAAC,CAAC,CAAC;IACfK,OAAO,GAAGL,EAAE,CAAC,CAAC,CAAC;EACjB,CAAC,MAAM;IACLI,OAAO,GAAGJ,EAAE,CAAC,CAAC,CAAC;IACfK,OAAO,GAAGL,EAAE,CAAC,CAAC,CAAC;IACfE,OAAO,GAAGF,EAAE,CAAC,CAAC,CAAC;IACfG,OAAO,GAAGH,EAAE,CAAC,CAAC,CAAC;EACjB;EACA,IAAIM,UAAU,GAAGN,EAAE,CAAC,CAAC,CAAC;EACtB,OAAO,CAACE,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,UAAU,CAAC;AACzD;AAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,SAASX,iBAAiBA,CAACJ,KAAK,EAAE;EAChCA,KAAK,CAACG,IAAI,CAAC,CAACd,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC,CAAE;EAC/B,IAAIoF,OAAO,GAAG,CAAC;EACf,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIpF,YAAY;EAChB,OAAOgF,OAAO,GAAGzE,KAAK,CAACD,MAAM,EAAE;IAC7B,QAAQC,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;MACvB,KAAKrF,WAAW;QACduF,YAAY,EAAE;QACdE,WAAW,IAAI7E,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;QAChCA,OAAO,EAAE;QACT;MACF,KAAKtF,WAAW;QACduF,YAAY,EAAE;QACdE,WAAW,IAAI5E,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;QAChCA,OAAO,EAAE;QACT;MACF,KAAKpF,UAAU;QACb;QACA,IAAIqF,YAAY,GAAGC,YAAY,GAAG,CAAC,EAAE;UACnC,IAAID,YAAY,KAAK,CAAC,IAAIC,YAAY,KAAK,CAAC,EAAE;YAC5C;YACAlF,YAAY,GAAGC,iBAAiB,CAACmF,WAAW,EAAED,WAAW,CAAC;YAC1D,IAAInF,YAAY,KAAK,CAAC,EAAE;cACtB,IAAKgF,OAAO,GAAGC,YAAY,GAAGC,YAAY,GAAI,CAAC,IAC3C3E,KAAK,CAACyE,OAAO,GAAGC,YAAY,GAAGC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IACnDtF,UAAU,EAAE;gBACdW,KAAK,CAACyE,OAAO,GAAGC,YAAY,GAAGC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAC/CE,WAAW,CAACjF,SAAS,CAAC,CAAC,EAAEH,YAAY,CAAC;cAC5C,CAAC,MAAM;gBACLO,KAAK,CAAC8E,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAACzF,UAAU,EACVwF,WAAW,CAACjF,SAAS,CAAC,CAAC,EAAEH,YAAY,CAAC,CAAC,CAAC;gBAC5DgF,OAAO,EAAE;cACX;cACAI,WAAW,GAAGA,WAAW,CAACjF,SAAS,CAACH,YAAY,CAAC;cACjDmF,WAAW,GAAGA,WAAW,CAAChF,SAAS,CAACH,YAAY,CAAC;YACnD;YACA;YACAA,YAAY,GAAGI,iBAAiB,CAACgF,WAAW,EAAED,WAAW,CAAC;YAC1D,IAAInF,YAAY,KAAK,CAAC,EAAE;cACtBO,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGI,WAAW,CAACjF,SAAS,CAACiF,WAAW,CAAC9E,MAAM,GACxDN,YAAY,CAAC,GAAGO,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;cACrCI,WAAW,GAAGA,WAAW,CAACjF,SAAS,CAAC,CAAC,EAAEiF,WAAW,CAAC9E,MAAM,GACrDN,YAAY,CAAC;cACjBmF,WAAW,GAAGA,WAAW,CAAChF,SAAS,CAAC,CAAC,EAAEgF,WAAW,CAAC7E,MAAM,GACrDN,YAAY,CAAC;YACnB;UACF;UACA;UACA,IAAIiF,YAAY,KAAK,CAAC,EAAE;YACtB1E,KAAK,CAAC8E,MAAM,CAACL,OAAO,GAAGE,YAAY,EAC/BD,YAAY,GAAGC,YAAY,EAAE,CAACvF,WAAW,EAAEyF,WAAW,CAAC,CAAC;UAC9D,CAAC,MAAM,IAAIF,YAAY,KAAK,CAAC,EAAE;YAC7B3E,KAAK,CAAC8E,MAAM,CAACL,OAAO,GAAGC,YAAY,EAC/BA,YAAY,GAAGC,YAAY,EAAE,CAACxF,WAAW,EAAEyF,WAAW,CAAC,CAAC;UAC9D,CAAC,MAAM;YACL5E,KAAK,CAAC8E,MAAM,CAACL,OAAO,GAAGC,YAAY,GAAGC,YAAY,EAC9CD,YAAY,GAAGC,YAAY,EAAE,CAACxF,WAAW,EAAEyF,WAAW,CAAC,EACvD,CAACxF,WAAW,EAAEyF,WAAW,CAAC,CAAC;UACjC;UACAJ,OAAO,GAAGA,OAAO,GAAGC,YAAY,GAAGC,YAAY,IACpCD,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;QAC/D,CAAC,MAAM,IAAIF,OAAO,KAAK,CAAC,IAAIzE,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIpF,UAAU,EAAE;UAC/D;UACAW,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIzE,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC;UAC1CzE,KAAK,CAAC8E,MAAM,CAACL,OAAO,EAAE,CAAC,CAAC;QAC1B,CAAC,MAAM;UACLA,OAAO,EAAE;QACX;QACAE,YAAY,GAAG,CAAC;QAChBD,YAAY,GAAG,CAAC;QAChBE,WAAW,GAAG,EAAE;QAChBC,WAAW,GAAG,EAAE;QAChB;IACJ;EACF;EACA,IAAI7E,KAAK,CAACA,KAAK,CAACD,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;IACrCC,KAAK,CAAC+E,GAAG,CAAC,CAAC,CAAC,CAAE;EAChB;;EAEA;EACA;EACA;EACA,IAAIC,OAAO,GAAG,KAAK;EACnBP,OAAO,GAAG,CAAC;EACX;EACA,OAAOA,OAAO,GAAGzE,KAAK,CAACD,MAAM,GAAG,CAAC,EAAE;IACjC,IAAIC,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIpF,UAAU,IACnCW,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIpF,UAAU,EAAE;MACvC;MACA,IAAIW,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC7E,SAAS,CAACI,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC1E,MAAM,GACpDC,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC1E,MAAM,CAAC,IAAIC,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAC1D;QACAzE,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGzE,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GACrCzE,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC7E,SAAS,CAAC,CAAC,EAAEI,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC1E,MAAM,GAC3BC,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC1E,MAAM,CAAC;QAC7DC,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGzE,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGzE,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrEzE,KAAK,CAAC8E,MAAM,CAACL,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC;QAC5BO,OAAO,GAAG,IAAI;MAChB,CAAC,MAAM,IAAIhF,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC7E,SAAS,CAAC,CAAC,EAAEI,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC1E,MAAM,CAAC,IACnEC,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACzB;QACAzE,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIzE,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9CzE,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,GACbzE,KAAK,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC7E,SAAS,CAACI,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC1E,MAAM,CAAC,GACzDC,KAAK,CAACyE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACzBzE,KAAK,CAAC8E,MAAM,CAACL,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC;QAC5BO,OAAO,GAAG,IAAI;MAChB;IACF;IACAP,OAAO,EAAE;EACX;EACA;EACA,IAAIO,OAAO,EAAE;IACX5E,iBAAiB,CAACJ,KAAK,CAAC;EAC1B;AACF;AAAC;AAGD,IAAIiF,IAAI,GAAG3F,SAAS;AACpB2F,IAAI,CAACC,MAAM,GAAG9F,WAAW;AACzB6F,IAAI,CAACE,MAAM,GAAGhG,WAAW;AACzB8F,IAAI,CAACG,KAAK,GAAG/F,UAAU;AAGvBgG,MAAM,CAACC,OAAO,GAAGL,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}