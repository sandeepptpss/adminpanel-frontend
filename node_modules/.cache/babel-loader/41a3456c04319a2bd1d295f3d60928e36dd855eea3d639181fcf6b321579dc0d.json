{"ast":null,"code":"var diff = require('fast-diff');\nvar is = require('./is');\nvar op = require('./op');\nvar NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\n\nvar Delta = function (ops) {\n  // Assume we are given a well formed ops\n  if (is.array(ops)) {\n    this.ops = ops;\n  } else if (is.object(ops) && is.array(ops.ops)) {\n    this.ops = ops.ops;\n  } else {\n    this.ops = [];\n  }\n};\nDelta.prototype.insert = function (text, attributes) {\n  var newOp = {};\n  if (is.string(text)) {\n    if (text.length === 0) return this;\n    newOp.insert = text;\n  } else if (is.number(text)) {\n    newOp.insert = text;\n  }\n  if (is.object(attributes) && Object.keys(attributes).length > 0) newOp.attributes = attributes;\n  return this.push(newOp);\n};\nDelta.prototype['delete'] = function (length) {\n  if (length <= 0) return this;\n  return this.push({\n    'delete': length\n  });\n};\nDelta.prototype.retain = function (length, attributes) {\n  if (length <= 0) return this;\n  var newOp = {\n    retain: length\n  };\n  if (is.object(attributes) && Object.keys(attributes).length > 0) newOp.attributes = attributes;\n  return this.push(newOp);\n};\nDelta.prototype.push = function (newOp) {\n  var index = this.ops.length;\n  var lastOp = this.ops[index - 1];\n  newOp = op.clone(newOp);\n  if (is.object(lastOp)) {\n    if (is.number(newOp['delete']) && is.number(lastOp['delete'])) {\n      this.ops[index - 1] = {\n        'delete': lastOp['delete'] + newOp['delete']\n      };\n      return this;\n    }\n    // Since it does not matter if we insert before or after deleting at the same index,\n    // always prefer to insert first\n    if (is.number(lastOp['delete']) && (is.string(newOp.insert) || is.number(newOp.insert))) {\n      index -= 1;\n      lastOp = this.ops[index - 1];\n      if (!is.object(lastOp)) {\n        this.ops.unshift(newOp);\n        return this;\n      }\n    }\n    if (is.equal(newOp.attributes, lastOp.attributes)) {\n      if (is.string(newOp.insert) && is.string(lastOp.insert)) {\n        this.ops[index - 1] = {\n          insert: lastOp.insert + newOp.insert\n        };\n        if (is.object(newOp.attributes)) this.ops[index - 1].attributes = newOp.attributes;\n        return this;\n      } else if (is.number(newOp.retain) && is.number(lastOp.retain)) {\n        this.ops[index - 1] = {\n          retain: lastOp.retain + newOp.retain\n        };\n        if (is.object(newOp.attributes)) this.ops[index - 1].attributes = newOp.attributes;\n        return this;\n      }\n    }\n  }\n  this.ops.splice(index, 0, newOp);\n  return this;\n};\nDelta.prototype.chop = function () {\n  var lastOp = this.ops[this.ops.length - 1];\n  if (lastOp && lastOp.retain && !lastOp.attributes) {\n    this.ops.pop();\n  }\n  return this;\n};\nDelta.prototype.length = function () {\n  return this.ops.reduce(function (length, elem) {\n    return length + op.length(elem);\n  }, 0);\n};\nDelta.prototype.slice = function (start, end) {\n  start = start || 0;\n  if (!is.number(end)) end = Infinity;\n  var delta = new Delta();\n  var iter = op.iterator(this.ops);\n  var index = 0;\n  while (index < end && iter.hasNext()) {\n    var nextOp;\n    if (index < start) {\n      nextOp = iter.next(start - index);\n    } else {\n      nextOp = iter.next(end - index);\n      delta.push(nextOp);\n    }\n    index += op.length(nextOp);\n  }\n  return delta;\n};\nDelta.prototype.compose = function (other) {\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  this.ops = [];\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (otherIter.peekType() === 'insert') {\n      this.push(otherIter.next());\n    } else if (thisIter.peekType() === 'delete') {\n      this.push(thisIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (is.number(otherOp.retain)) {\n        var newOp = {};\n        if (is.number(thisOp.retain)) {\n          newOp.retain = length;\n        } else {\n          newOp.insert = thisOp.insert;\n        }\n        // Preserve null when composing with a retain, otherwise remove it for inserts\n        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, is.number(thisOp.retain));\n        if (attributes) newOp.attributes = attributes;\n        this.push(newOp);\n        // Other op should be delete, we could be an insert or retain\n        // Insert + delete cancels out\n      } else if (is.number(otherOp['delete']) && is.number(thisOp.retain)) {\n        this.push(otherOp);\n      }\n    }\n  }\n  return this.chop();\n};\nDelta.prototype.diff = function (other) {\n  var strings = [this.ops, other.ops].map(function (ops) {\n    return ops.map(function (op) {\n      if (is.string(op.insert)) return op.insert;\n      if (is.number(op.insert)) return NULL_CHARACTER;\n      var prep = ops === other.ops ? 'on' : 'with';\n      throw new Error('diff() called ' + prep + ' non-document');\n    }).join('');\n  });\n  var diffResult = diff(strings[0], strings[1]);\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  diffResult.forEach(function (component) {\n    var length = component[1].length;\n    while (length > 0) {\n      var opLength = 0;\n      switch (component[0]) {\n        case diff.INSERT:\n          opLength = Math.min(otherIter.peekLength(), length);\n          delta.push(otherIter.next(opLength));\n          break;\n        case diff.DELETE:\n          opLength = Math.min(length, thisIter.peekLength());\n          thisIter.next(opLength);\n          delta['delete'](opLength);\n          break;\n        case diff.EQUAL:\n          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n          var thisOp = thisIter.next(opLength);\n          var otherOp = otherIter.next(opLength);\n          if (thisOp.insert === otherOp.insert) {\n            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));\n          } else {\n            delta.push(otherOp)['delete'](opLength);\n          }\n          break;\n      }\n      length -= opLength;\n    }\n  });\n  return delta.chop();\n};\nDelta.prototype.transform = function (other, priority) {\n  priority = !!priority;\n  if (is.number(other)) {\n    return this.transformPosition(other, priority);\n  }\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n      delta.retain(op.length(thisIter.next()));\n    } else if (otherIter.peekType() === 'insert') {\n      delta.push(otherIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (thisOp['delete']) {\n        // Our delete either makes their delete redundant or removes their retain\n        continue;\n      } else if (otherOp['delete']) {\n        delta.push(otherOp);\n      } else {\n        // We retain either their retain or insert\n        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));\n      }\n    }\n  }\n  return delta.chop();\n};\nDelta.prototype.transformPosition = function (index, priority) {\n  priority = !!priority;\n  var thisIter = op.iterator(this.ops);\n  var offset = 0;\n  while (thisIter.hasNext() && offset <= index) {\n    var length = thisIter.peekLength();\n    var nextType = thisIter.peekType();\n    thisIter.next();\n    if (nextType === 'delete') {\n      index -= Math.min(length, index - offset);\n      continue;\n    } else if (nextType === 'insert' && (offset < index || !priority)) {\n      index += length;\n    }\n    offset += length;\n  }\n  return index;\n};\nmodule.exports = Delta;","map":{"version":3,"names":["diff","require","is","op","NULL_CHARACTER","String","fromCharCode","Delta","ops","array","object","prototype","insert","text","attributes","newOp","string","length","number","Object","keys","push","retain","index","lastOp","clone","unshift","equal","splice","chop","pop","reduce","elem","slice","start","end","Infinity","delta","iter","iterator","hasNext","nextOp","next","compose","other","thisIter","otherIter","peekType","Math","min","peekLength","thisOp","otherOp","strings","map","prep","Error","join","diffResult","forEach","component","opLength","INSERT","DELETE","EQUAL","transform","priority","transformPosition","offset","nextType","module","exports"],"sources":["/home/tpss/public_html/Mernstack/authtask/frontend/node_modules/rich-text/lib/delta.js"],"sourcesContent":["var diff = require('fast-diff');\nvar is = require('./is');\nvar op = require('./op');\n\n\nvar NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()\n\n\nvar Delta = function (ops) {\n  // Assume we are given a well formed ops\n  if (is.array(ops)) {\n    this.ops = ops;\n  } else if (is.object(ops) && is.array(ops.ops)) {\n    this.ops = ops.ops;\n  } else {\n    this.ops = [];\n  }\n};\n\n\nDelta.prototype.insert = function (text, attributes) {\n  var newOp = {};\n  if (is.string(text)) {\n    if (text.length === 0) return this;\n    newOp.insert = text;\n  } else if (is.number(text)) {\n    newOp.insert = text;\n  }\n  if (is.object(attributes) && Object.keys(attributes).length > 0) newOp.attributes = attributes;\n  return this.push(newOp);\n};\n\nDelta.prototype['delete'] = function (length) {\n  if (length <= 0) return this;\n  return this.push({ 'delete': length });\n};\n\nDelta.prototype.retain = function (length, attributes) {\n  if (length <= 0) return this;\n  var newOp = { retain: length };\n  if (is.object(attributes) && Object.keys(attributes).length > 0) newOp.attributes = attributes;\n  return this.push(newOp);\n};\n\nDelta.prototype.push = function (newOp) {\n  var index = this.ops.length;\n  var lastOp = this.ops[index - 1];\n  newOp = op.clone(newOp);\n  if (is.object(lastOp)) {\n    if (is.number(newOp['delete']) && is.number(lastOp['delete'])) {\n      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };\n      return this;\n    }\n    // Since it does not matter if we insert before or after deleting at the same index,\n    // always prefer to insert first\n    if (is.number(lastOp['delete']) && (is.string(newOp.insert) || is.number(newOp.insert))) {\n      index -= 1;\n      lastOp = this.ops[index - 1];\n      if (!is.object(lastOp)) {\n        this.ops.unshift(newOp);\n        return this;\n      }\n    }\n    if (is.equal(newOp.attributes, lastOp.attributes)) {\n      if (is.string(newOp.insert) && is.string(lastOp.insert)) {\n        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n        if (is.object(newOp.attributes)) this.ops[index - 1].attributes = newOp.attributes\n        return this;\n      } else if (is.number(newOp.retain) && is.number(lastOp.retain)) {\n        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n        if (is.object(newOp.attributes)) this.ops[index - 1].attributes = newOp.attributes\n        return this;\n      }\n    }\n  }\n  this.ops.splice(index, 0, newOp);\n  return this;\n};\n\nDelta.prototype.chop = function () {\n  var lastOp = this.ops[this.ops.length - 1];\n  if (lastOp && lastOp.retain && !lastOp.attributes) {\n    this.ops.pop();\n  }\n  return this;\n};\n\nDelta.prototype.length = function () {\n  return this.ops.reduce(function (length, elem) {\n    return length + op.length(elem);\n  }, 0);\n};\n\nDelta.prototype.slice = function (start, end) {\n  start = start || 0;\n  if (!is.number(end)) end = Infinity;\n  var delta = new Delta();\n  var iter = op.iterator(this.ops);\n  var index = 0;\n  while (index < end && iter.hasNext()) {\n    var nextOp;\n    if (index < start) {\n      nextOp = iter.next(start - index);\n    } else {\n      nextOp = iter.next(end - index);\n      delta.push(nextOp);\n    }\n    index += op.length(nextOp);\n  }\n  return delta;\n};\n\n\nDelta.prototype.compose = function (other) {\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  this.ops = [];\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (otherIter.peekType() === 'insert') {\n      this.push(otherIter.next());\n    } else if (thisIter.peekType() === 'delete') {\n      this.push(thisIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (is.number(otherOp.retain)) {\n        var newOp = {};\n        if (is.number(thisOp.retain)) {\n          newOp.retain = length;\n        } else {\n          newOp.insert = thisOp.insert;\n        }\n        // Preserve null when composing with a retain, otherwise remove it for inserts\n        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, is.number(thisOp.retain));\n        if (attributes) newOp.attributes = attributes;\n        this.push(newOp);\n      // Other op should be delete, we could be an insert or retain\n      // Insert + delete cancels out\n      } else if (is.number(otherOp['delete']) && is.number(thisOp.retain)) {\n        this.push(otherOp);\n      }\n    }\n  }\n  return this.chop();\n};\n\nDelta.prototype.diff = function (other) {\n  var strings = [this.ops, other.ops].map(function (ops) {\n    return ops.map(function (op) {\n      if (is.string(op.insert)) return op.insert;\n      if (is.number(op.insert)) return NULL_CHARACTER;\n      var prep = ops === other.ops ? 'on' : 'with';\n      throw new Error('diff() called ' + prep + ' non-document');\n    }).join('');\n  });\n  var diffResult = diff(strings[0], strings[1]);\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  diffResult.forEach(function (component) {\n    var length = component[1].length;\n    while (length > 0) {\n      var opLength = 0;\n      switch (component[0]) {\n        case diff.INSERT:\n          opLength = Math.min(otherIter.peekLength(), length);\n          delta.push(otherIter.next(opLength));\n          break;\n        case diff.DELETE:\n          opLength = Math.min(length, thisIter.peekLength());\n          thisIter.next(opLength);\n          delta['delete'](opLength);\n          break;\n        case diff.EQUAL:\n          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n          var thisOp = thisIter.next(opLength);\n          var otherOp = otherIter.next(opLength);\n          if (thisOp.insert === otherOp.insert) {\n            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));\n          } else {\n            delta.push(otherOp)['delete'](opLength);\n          }\n          break;\n      }\n      length -= opLength;\n    }\n  });\n  return delta.chop();\n};\n\nDelta.prototype.transform = function (other, priority) {\n  priority = !!priority;\n  if (is.number(other)) {\n    return this.transformPosition(other, priority);\n  }\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n      delta.retain(op.length(thisIter.next()));\n    } else if (otherIter.peekType() === 'insert') {\n      delta.push(otherIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (thisOp['delete']) {\n        // Our delete either makes their delete redundant or removes their retain\n        continue;\n      } else if (otherOp['delete']) {\n        delta.push(otherOp);\n      } else {\n        // We retain either their retain or insert\n        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));\n      }\n    }\n  }\n  return delta.chop();\n};\n\nDelta.prototype.transformPosition = function (index, priority) {\n  priority = !!priority;\n  var thisIter = op.iterator(this.ops);\n  var offset = 0;\n  while (thisIter.hasNext() && offset <= index) {\n    var length = thisIter.peekLength();\n    var nextType = thisIter.peekType();\n    thisIter.next();\n    if (nextType === 'delete') {\n      index -= Math.min(length, index - offset);\n      continue;\n    } else if (nextType === 'insert' && (offset < index || !priority)) {\n      index += length;\n    }\n    offset += length;\n  }\n  return index;\n};\n\n\nmodule.exports = Delta;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}